<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged type/meta</title>
<link href="http://project-renard.github.io//tag/type/meta/"/>
<link href="http://project-renard.github.io//tag/type/meta/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Project Renard</name>

</author>




<id>http://project-renard.github.io//tag/type/meta/</id>

<subtitle type="html">Project Renard</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20120202ubuntu1">ikiwiki</generator>
<updated>2016-03-10T20:35:35Z</updated>
<entry>
	<title>getfield</title>

	<id>http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/getfield/</id>

	<link href="http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/getfield/"/>






	<category term="type/format" />

	<category term="type/meta" />


	<updated>2016-03-10T20:35:35Z</updated>
	<published>2016-03-10T20:35:35Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;[[!template &lt;span class=&quot;error&quot;&gt;Error: failed to process template &lt;span class=&quot;createlink&quot;&gt;plugin&lt;/span&gt; &lt;/span&gt;]]&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;NAME&lt;/h2&gt;

&lt;p&gt;IkiWiki::Plugin::getfield - query the values of fields&lt;/p&gt;

&lt;h2 id=&quot;synopsis&quot;&gt;SYNOPSIS&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# activate the plugin
add_plugins =&amp;gt; [qw{goodstuff getfield ....}],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;description&quot;&gt;DESCRIPTION&lt;/h2&gt;

&lt;p&gt;This plugin provides a way of querying the meta-data (data fields) of a page
inside the page content (rather than inside a template) This provides a way to
use per-page structured data, where each page is treated like a record, and the
structured data are fields in that record.  This can include the meta-data for
that page, such as the page title.&lt;/p&gt;

&lt;p&gt;This plugin is meant to be used in conjunction with the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt; plugin.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;USAGE&lt;/h3&gt;

&lt;p&gt;One can get the value of a field by using special markup in the page.
This does not use directive markup, in order to make it easier to
use the markup inside other directives.  There are four forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;{{$&lt;em&gt;fieldname&lt;/em&gt;}}&lt;/p&gt;

&lt;p&gt;This queries the value of &lt;em&gt;fieldname&lt;/em&gt; for the source page.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[!meta  title=&quot;My Long and Complicated Title With Potential For Spelling Mistakes&quot;]]
# {{&amp;#036;title}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the page is processed, this will give you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;My Long and Complicated Title With Potential For Spelling Mistakes&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{{$&lt;em&gt;pagename&lt;/em&gt;#&lt;em&gt;fieldname&lt;/em&gt;}}&lt;/p&gt;

&lt;p&gt;This queries the value of &lt;em&gt;fieldname&lt;/em&gt; for the page &lt;em&gt;pagename&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;On PageFoo:&lt;/p&gt;

&lt;p&gt;[[!meta  title=&quot;I Am Page Foo&quot;]]&lt;/p&gt;

&lt;p&gt;Stuff about Foo.&lt;/p&gt;

&lt;p&gt;On PageBar:&lt;/p&gt;

&lt;p&gt;For more info, see [[{{$PageFoo#title}}|PageFoo]].&lt;/p&gt;

&lt;p&gt;When PageBar is displayed:&lt;/p&gt;

&lt;p&gt;&amp;lt;p&amp;gt;For more info, see &amp;lt;a href=&quot;PageFoo&quot;&amp;gt;I Am Page Foo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{{+$&lt;em&gt;fieldname&lt;/em&gt;+}}&lt;/p&gt;

&lt;p&gt;This queries the value of &lt;em&gt;fieldname&lt;/em&gt; for the destination page; that is,
the value when this page is included inside another page.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;On PageA:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[!meta  title=&quot;I Am Page A&quot;]]
# {{+&amp;#036;title+}}


Stuff about A.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On PageB:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[!meta  title=&quot;I Am Page B&quot;]]
[[!inline  pagespec=&quot;PageA&quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When PageA is displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;I Am Page A&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Stuff about A.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When PageB is displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;I Am Page B&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Stuff about A.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;{{+$&lt;em&gt;pagename&lt;/em&gt;#&lt;em&gt;fieldname&lt;/em&gt;+}}&lt;/p&gt;

&lt;p&gt;This queries the value of &lt;em&gt;fieldname&lt;/em&gt; for the page &lt;em&gt;pagename&lt;/em&gt;; the
only difference between this and {{$&lt;em&gt;pagename&lt;/em&gt;#&lt;em&gt;fieldname&lt;/em&gt;}} is
that the full name of &lt;em&gt;pagename&lt;/em&gt; is calculated relative to the
destination page rather than the source page.&lt;/p&gt;

&lt;p&gt;I can&#39;t really think of a reason why this should be needed, but
this format has been added for completeness.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;escaping&quot;&gt;Escaping&lt;/h3&gt;

&lt;p&gt;Getfield markup can be escaped by putting a backwards slash &lt;code&gt;\&lt;/code&gt;
in front of the markup.
If that is done, then the markup is displayed as-is.&lt;/p&gt;

&lt;h3 id=&quot;novaluefound&quot;&gt;No Value Found&lt;/h3&gt;

&lt;p&gt;If no value is found for the given field, then the field name is returned.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;On PageFoo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[!meta  title=&quot;Foo&quot;]]
My title is {{&amp;#036;title}}.

My description is {{&amp;#036;description}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When PageFoo is displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;My title is Foo.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;My description is description.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because &quot;description&quot; hasn&#39;t been defined for that page.&lt;/p&gt;

&lt;h3 id=&quot;moreexamples&quot;&gt;More Examples&lt;/h3&gt;

&lt;p&gt;Listing all the sub-pages of the current page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[!map  pages=&quot;{{&amp;#036;page}}/*&quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;download&quot;&gt;DOWNLOAD&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browse at GitHub: &lt;a href=&quot;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/getfield.pm&quot;&gt;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/getfield.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git repo at git://github.com/rubykat/ikiplugins.git&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>field</title>

	<id>http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/field/</id>

	<link href="http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/field/"/>






	<category term="type/meta" />


	<updated>2016-03-10T20:35:35Z</updated>
	<published>2016-03-10T20:35:35Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;[[!template &lt;span class=&quot;error&quot;&gt;Error: failed to process template &lt;span class=&quot;createlink&quot;&gt;plugin&lt;/span&gt; &lt;/span&gt;]]&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;NAME&lt;/h2&gt;

&lt;p&gt;IkiWiki::Plugin::field - front-end for per-page record fields.&lt;/p&gt;

&lt;h2 id=&quot;synopsis&quot;&gt;SYNOPSIS&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# activate the plugin
add_plugins =&amp;gt; [qw{goodstuff field ....}],

# simple registration
field_register =&amp;gt; [qw{meta}],

# simple registration with priority
field_register =&amp;gt; {
meta =&amp;gt; &#39;last&#39;
foo =&amp;gt; &#39;DD&#39;
},

# allow the config to be queried as a field
field_allow_config =&amp;gt; 1,

# flag certain fields as &quot;tags&quot;
field_tags =&amp;gt; {
BookAuthor =&amp;gt; &#39;/books/authors&#39;,
BookGenre =&amp;gt; &#39;/books/genres&#39;,
MovieGenre =&amp;gt; &#39;/movies/genres&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;description&quot;&gt;DESCRIPTION&lt;/h2&gt;

&lt;p&gt;This plugin is meant to be used in conjunction with other plugins
in order to provide a uniform interface to access per-page structured
data, where each page is treated like a record, and the structured data
are fields in that record.  This can include the meta-data for that page,
such as the page title.&lt;/p&gt;

&lt;p&gt;Plugins can register a function which will return the value of a &quot;field&quot; for
a given page.  This can be used in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In page templates; all registered fields will be passed to the page template in the &quot;pagetemplate&quot; processing.&lt;/li&gt;
&lt;li&gt;In PageSpecs; the &quot;field&quot; function can be used to match the value of a field in a page.&lt;/li&gt;
&lt;li&gt;In SortSpecs; the &quot;field&quot; function can be used for sorting pages by the value of a field in a page.&lt;/li&gt;
&lt;li&gt;By other plugins, using the field_get_value function, to get the value of a field for a page, and do with it what they will.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configurationoptions&quot;&gt;CONFIGURATION OPTIONS&lt;/h2&gt;

&lt;p&gt;The following options can be set in the ikiwiki setup file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;field_allow_config&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field_allow_config =&amp;gt; 1,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Allow the $config hash to be queried like any other field; the 
keys of the config hash are the field names with a prefix of &quot;CONFIG-&quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;field_register&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field_register =&amp;gt; [qw{meta}],

field_register =&amp;gt; {
meta =&amp;gt; &#39;last&#39;
foo =&amp;gt; &#39;DD&#39;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A hash of plugin-IDs to register.  The keys of the hash are the names of the
plugins, and the values of the hash give the order of lookup of the field
values.  The order can be &#39;first&#39;, &#39;last&#39;, &#39;middle&#39;, or an explicit order
sequence between &#39;AA&#39; and &#39;ZZ&#39;.  If the simpler type of registration is used,
then the order will be &#39;middle&#39;.&lt;/p&gt;

&lt;p&gt;This assumes that the plugins in question store data in the %pagestatus hash
using the ID of that plugin, and thus the field values are looked for there.&lt;/p&gt;

&lt;p&gt;This is the simplest form of registration, but the advantage is that it
doesn&#39;t require the plugin to be modified in order for it to be
registered with the &quot;field&quot; plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;field_tags&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;field_tags =&amp;gt; {
BookAuthor =&amp;gt; &#39;/books/authors&#39;,
BookGenre =&amp;gt; &#39;/books/genres&#39;,
MovieGenre =&amp;gt; &#39;/movies/genres&#39;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A hash of fields and their associated pages.  This provides a faceted
tagging system.&lt;/p&gt;

&lt;p&gt;The way this works is that a given field-name will be associated with a given
page, and the values of that field will be linked to sub-pages of that page,
the same way that the [[!tag  ]] directive does.&lt;/p&gt;

&lt;p&gt;This also provides a field with the suffix of &lt;code&gt;-tagpage&lt;/code&gt; which gives
the name of the page to which that field-value is linked.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BookGenre: SF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will link to &quot;/books/genres/SF&quot;, with a link-type of &quot;bookgenre&quot;.&lt;/p&gt;

&lt;p&gt;If one was using a template, then the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Genre: &amp;lt;TMPL_VAR BOOKGENRE&amp;gt;
GenrePage: &amp;lt;TMPL_VAR BOOKGENRE-TAGPAGE&amp;gt;
GenreLink: [[&amp;lt;TMPL_VAR BOOKGENRE-TAGPAGE&amp;gt;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would give:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Genre: SF
GenrePage: /books/genres/SF
GenreLink: &amp;lt;a href=&quot;/books/genres/SF/&quot;&amp;gt;SF&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;pagespec&quot;&gt;PageSpec&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;field&lt;/code&gt; plugin provides a few PageSpec functions to match values
of fields for pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;field
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;field(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;field(bar Foo*) will match if the &quot;bar&quot; field starts with &quot;Foo&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;destfield
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destfield(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;as for &quot;field&quot; but matches against the destination page (i.e when the source page is being included in another page).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;field_item
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;field_item(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;field_item(bar Foo) will match if one of the values of the &quot;bar&quot; field is &quot;Foo&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;destfield_item
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destfield_item(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;as for &quot;field_item&quot; but matches against the destination page.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;field_null
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;field_null(&lt;em&gt;name&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;matches if the field is null, that is, if there is no value for that field, or the value is empty.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;field_tagged
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;field_tagged(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;like &lt;code&gt;tagged&lt;/code&gt;, but this uses the tag-bases and link-types defined in the &lt;code&gt;field_tags&lt;/code&gt; configuration option.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;destfield_tagged
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destfield_tagged(&lt;em&gt;name&lt;/em&gt; &lt;em&gt;glob&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;as for &quot;field_tagged&quot; but matches against the destination page.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sortspec&quot;&gt;SortSpec&lt;/h2&gt;

&lt;p&gt;The &quot;field&quot; SortSpec function can be used to sort a page depending on the value of a field for that page.  This is used for directives that take sort parameters, such as &lt;strong&gt;inline&lt;/strong&gt; or &lt;strong&gt;report&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;field(&lt;em&gt;name&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;sort=&quot;field(bar)&quot; will sort by the value og the &quot;bar&quot; field.&lt;/p&gt;

&lt;p&gt;Additionally, the &quot;field_natural&quot; SortSpec function will use the
Sort::Naturally module to do its comparison (though it will fail if that
module is not installed).&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;FUNCTIONS&lt;/h2&gt;

&lt;h3 id=&quot;field_register&quot;&gt;field_register&lt;/h3&gt;

&lt;p&gt;field_register(id=&gt;$id);&lt;/p&gt;

&lt;p&gt;Register a plugin as having field data.  The above form is the simplest, where
the field value is looked up in the %pagestatus hash under the plugin-id.&lt;/p&gt;

&lt;p&gt;Additional Options:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;call=&gt;&amp;amp;myfunc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A reference to a function to call rather than just looking up the value in the
%pagestatus hash.  It takes two arguments: the name of the field, and the name
of the page.  It is expected to return (a) an array of the values of that field
if &quot;wantarray&quot; is true, or (b) a concatenation of the values of that field
if &quot;wantarray&quot; is not true, or (c) undef if there is no field by that name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub myfunc (&amp;#036;&amp;#036;) {
my &amp;#036;field = shift;
my &amp;#036;page = shift;

...

return (wantarray ? @values : &amp;#036;value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;first=&gt;1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set this to be called first in the sequence of calls looking for values.  Since
the first found value is the one which is returned, ordering is significant.
This is equivalent to &quot;order=&gt;&#39;first&#39;&quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;last=&gt;1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set this to be called last in the sequence of calls looking for values.  Since
the first found value is the one which is returned, ordering is significant.
This is equivalent to &quot;order=&gt;&#39;last&#39;&quot;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;order=&gt;$order&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set the explicit ordering in the sequence of calls looking for values.  Since
the first found value is the one which is returned, ordering is significant.&lt;/p&gt;

&lt;p&gt;The values allowed for this are &quot;first&quot;, &quot;last&quot;, &quot;middle&quot;, or a two-character
ordering-sequence between &#39;AA&#39; and &#39;ZZ&#39;.&lt;/p&gt;

&lt;h3 id=&quot;field_get_valuefieldpage&quot;&gt;field_get_value($field, $page)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;my &amp;#036;value = field_get_value(&amp;#036;field, &amp;#036;page);

my &amp;#036;value = field_get_value(&amp;#036;field, &amp;#036;page, foo=&amp;gt;&#39;bar&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returns the value of the field for that page, or undef if none is found.
It is also possible to override the value returned by passing in
a value of your own.&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;DOWNLOAD&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browse at GitHub: &lt;a href=&quot;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/field.pm&quot;&gt;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/field.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git repo at git://github.com/rubykat/ikiplugins.git&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>report</title>

	<id>http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/report/</id>

	<link href="http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/report/"/>






	<category term="type/format" />

	<category term="type/meta" />


	<updated>2016-03-10T20:35:35Z</updated>
	<published>2016-03-10T20:35:35Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;[[!template &lt;span class=&quot;error&quot;&gt;Error: failed to process template &lt;span class=&quot;createlink&quot;&gt;plugin&lt;/span&gt; &lt;/span&gt;]]&lt;/p&gt;

&lt;p&gt;IkiWiki::Plugin::report - Produce templated reports from page field data.&lt;/p&gt;

&lt;p&gt;This plugin provides the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/ikiwiki/directive/report/&quot;&gt;report&lt;/a&gt; directive.  This enables
one to report on the structured data (&quot;field&quot; values) of multiple pages; the
output is formatted via a template.  This depends on the
&lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt; plugin.&lt;/p&gt;

&lt;h2 id=&quot;activatetheplugin&quot;&gt;Activate the plugin&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# activate the plugin
add_plugins =&amp;gt; [qw{goodstuff report ....}],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;PREREQUISITES&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;IkiWiki
IkiWiki::Plugin::field
HTML::Template
Encode
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;download&quot;&gt;DOWNLOAD&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browse at GitHub: &lt;a href=&quot;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/report.pm&quot;&gt;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/report.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git repo at git://github.com/rubykat/ikiplugins.git&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>ymlfront</title>

	<id>http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/ymlfront/</id>

	<link href="http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/ymlfront/"/>






	<category term="type/meta" />


	<updated>2016-03-10T20:35:35Z</updated>
	<published>2016-03-10T20:35:35Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;[[!template &lt;span class=&quot;error&quot;&gt;Error: failed to process template &lt;span class=&quot;createlink&quot;&gt;plugin&lt;/span&gt; &lt;/span&gt;]]&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;NAME&lt;/h2&gt;

&lt;p&gt;IkiWiki::Plugin::ymlfront - add YAML-format data to a page&lt;/p&gt;

&lt;h2 id=&quot;synopsis&quot;&gt;SYNOPSIS&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# activate the plugin
add_plugins =&amp;gt; [qw{goodstuff ymlfront ....}],

# configure the plugin
ymlfront_delim =&amp;gt; [qw(--YAML-- --YAML--)],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;description&quot;&gt;DESCRIPTION&lt;/h2&gt;

&lt;p&gt;This plugin provides a way of adding arbitrary meta-data (data fields) to any
page by prefixing the page with a YAML-format document.  This also provides
the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/ikiwiki/directive/ymlfront/&quot;&gt;ymlfront&lt;/a&gt; directive, which enables one to put
YAML-formatted data inside a standard IkiWiki &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/ikiwiki/directive/&quot;&gt;directive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a way to create per-page structured data, where each page is
treated like a record, and the structured data are fields in that record.  This
can include the meta-data for that page, such as the page title.&lt;/p&gt;

&lt;p&gt;This plugin is meant to be used in conjunction with the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt; plugin.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;DETAILS&lt;/h2&gt;

&lt;p&gt;There are three formats for adding YAML data to a page.  These formats
should not be mixed - the result is undefined.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ymlfront directive&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/ikiwiki/directive/ymlfront/&quot;&gt;ymlfront&lt;/a&gt; for more information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;default YAML-compatible delimiter&lt;/p&gt;

&lt;p&gt;By default, the YAML-format data in a page is placed at the start of
the page and delimited by lines containing precisely three dashes.
This is what YAML itself uses to delimit multiple documents.
The &quot;normal&quot; content of the page then follows.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Foo does not work
Urgency: High
Status: Assigned
AssignedTo: Fred Nurk
Version: 1.2.3
---
When running on the Sprongle system, the Foo function returns incorrect data.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What will normally be displayed is everything following the second line of dashes.  That will be htmlized using the page-type of the page-file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;user-defined delimiter&lt;/p&gt;

&lt;p&gt;Instead of using the default &quot;---&quot; delimiter, the user can define,
in the configuration file, the &lt;strong&gt;ymlfront_delim&lt;/strong&gt; value, which is an
array containing two strings. The first string defines the markup for
the start of the YAML data, and the second string defines the markip
for the end of the YAML data. These two strings can be the same, or
they can be different. In this case, the YAML data section is not
required to be at the start of the page, but as with the default, it
is expected that only one data section will be on the page.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--YAML--
title: Foo does not work
Urgency: High
Status: Assigned
AssignedTo: Fred Nurk
Version: 1.2.3
--YAML--
When running on the Sprongle system, the Foo function returns incorrect data.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What will normally be displayed is everything outside the delimiters,
both before and after.  That will be htmlized using the page-type of the page-file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;accessingthedata&quot;&gt;Accessing the Data&lt;/h3&gt;

&lt;p&gt;There are a few ways to access the given YAML data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/getfield/&quot;&gt;getfield&lt;/a&gt; plugin&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;getfield&lt;/strong&gt; plugin can display the data as individual variable values.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Foo does not work
Urgency: High
Status: Assigned
AssignedTo: Fred Nurk
Version: 1.2.3
---
# {{&amp;#036;title}}


**Urgency:** {{&amp;#036;Urgency}}\\
**Status:** {{&amp;#036;Status}}\\
**Assigned To:** {{&amp;#036;AssignedTo}}\\
**Version:** {{&amp;#036;Version}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When running on the Sprongle system, the Foo function returns incorrect data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/ftemplate/&quot;&gt;ftemplate&lt;/a&gt; plugin&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ftemplate&lt;/strong&gt; plugin is like the &lt;span class=&quot;createlink&quot;&gt;template&lt;/span&gt; plugin, but it is also aware of &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt; values.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Foo does not work
Urgency: High
Status: Assigned
AssignedTo: Fred Nurk
Version: 1.2.3
---
[[!ftemplate  id=&quot;bug_display_template&quot;]]


When running on the Sprongle system, the Foo function returns incorrect data.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/report/&quot;&gt;report&lt;/a&gt; plugin&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;report&lt;/strong&gt; plugin is like the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/ftemplate/&quot;&gt;ftemplate&lt;/a&gt; plugin, but it reports on multiple pages, rather than just the current page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;write your own plugin&lt;/p&gt;

&lt;p&gt;In conjunction with the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt; plugin, you can write your own plugin to access the data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;PREREQUISITES&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;IkiWiki
IkiWiki::Plugin::field
YAML::Any
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;download&quot;&gt;DOWNLOAD&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browse at GitHub: &lt;a href=&quot;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/ymlfront.pm&quot;&gt;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/ymlfront.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git repo at git://github.com/rubykat/ikiplugins.git&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>
<entry>
	<title>ftemplate</title>

	<id>http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/ftemplate/</id>

	<link href="http://project-renard.github.io//rubykat-ikiplugins/doc/plugins/contrib/ftemplate/"/>






	<category term="type/format" />

	<category term="type/meta" />


	<updated>2016-03-10T20:35:35Z</updated>
	<published>2016-03-10T20:35:35Z</published>

	<content type="html" xml:lang="en">
	&lt;p&gt;[[!template &lt;span class=&quot;error&quot;&gt;Error: failed to process template &lt;span class=&quot;createlink&quot;&gt;plugin&lt;/span&gt; &lt;/span&gt;]]&lt;/p&gt;

&lt;p&gt;This plugin provides the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/ikiwiki/directive/ftemplate/&quot;&gt;ftemplate&lt;/a&gt; directive.&lt;/p&gt;

&lt;p&gt;This is like the &lt;span class=&quot;createlink&quot;&gt;template&lt;/span&gt; directive, with the addition
that one does not have to provide all the values in the call to the template,
because ftemplate can query structured data (&quot;fields&quot;) using the &lt;a href=&quot;http://project-renard.github.io//tag/type/meta/../../../rubykat-ikiplugins/doc/plugins/contrib/field/&quot;&gt;field&lt;/a&gt;
plugin.&lt;/p&gt;

&lt;h2 id=&quot;activatetheplugin&quot;&gt;Activate the plugin&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;add_plugins =&amp;gt; [qw{goodstuff ftemplate ....}],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;PREREQUISITES&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;IkiWiki
IkiWiki::Plugin::field
HTML::Template
Encode
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;download&quot;&gt;DOWNLOAD&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;browse at GitHub: &lt;a href=&quot;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/ftemplate.pm&quot;&gt;http://github.com/rubykat/ikiplugins/blob/master/IkiWiki/Plugin/ftemplate.pm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git repo at git://github.com/rubykat/ikiplugins.git&lt;/li&gt;
&lt;/ul&gt;

	</content>



</entry>

</feed>

---
repo: project-renard/p5-Renard-Jacquard
cpan: Renard-Jacquard
type: library
travis-ci: https://travis-ci.org/project-renard/p5-Renard-Jacquard
travis-ci-badge: https://travis-ci.org/project-renard/p5-Renard-Jacquard.svg?branch=master
appveyor-ci: https://ci.appveyor.com/project/zmughal/p5-Renard-Jacquard
appveyor-ci-badge: https://ci.appveyor.com/api/projects/status/hfcpypsapfq62u4l/branch/master?svg=true
coveralls: https://coveralls.io/github/project-renard/p5-Renard-Jacquard?branch=master
coveralls-badge: https://coveralls.io/repos/github/project-renard/p5-Renard-Jacquard/badge.svg?branch=master
---
[[!ftemplate id=repo]]

See [[Jacquard loom|https://en.wikipedia.org/wiki/Jacquard_loom]].



# Render tree

[[!graph src="""
root -> item1


item1_vn [shape=circle,width=.01,height=.01,label=""]; item1 -> item1_vn [arrowhead=none, label="has"];
item1_vn -> { transform, position, layout, content };

position -> layout [ label = "calls" ];
content -> rectangle [ label = "has" ];

rectangle -> size
rectangle -> "render_tree(state)"

"render_tree(state)" -> render_tree_root

render_tree_root -> "Taffetta::Rectangle"

state -> transform -> size

state -> push_transform
state -> position

"""]]

[[!uml src="""
RootNode *-- ItemNode: contains

ItemNode *-- Rectangle: contains

ItemNode *-- Layout: contains

class State {
    Transform transform;
}

class RootNode {
    ItemNode item1;
}

class ItemNode {
    Content content;
    Layout layout;
    Transform transform;

    ---
    Transform get_current_transform( $state ) {
    \t $state->apply_transform( $transform );
    \}
    ---

    Position position() {
    \t $self->layout->get_position( $state, $self )
    \}
}

class Layout {
    Position get_position( $actor );
}

class Rectangle extends Content {
    PositiveInt width;
    PositiveInt height;

    RenderTree get_render_tree( $state );
}

class RenderTreeNode {
    Taffetta::Rectangle object;
}

"""]]

[[!meta title="Flashcard architecture"]]
[[!meta description="Architecture for adding flashcards to curie"]]

# Tasks

1. DB
    1. [✓] All documents need to be stored with their checksum and path.
        - This is so that a file can be associated with a document ID in the DB.
        - Use [[`Digest::MD5`|https://p3rl.org/Digest::MD5]].
2. Automatic phrase extraction
    1. [✓] Process the text of a PDF file with [[PyTextRank|https://github.com/ceteri/pytextrank]].
    2. [✓] Find the text of phrases inside that PDF file.
        - Use [[`Regexp::Assemble`|https://p3rl.org/Regexp::Assemble]].
    3. [_] Store the offset of that text.
3. Cloze
    1. Need to be able to cover a set of given text offsets.
    2. Types
        - nonoverlapping: Hide all, reveal one
        - overlapping: Hide one, reveal all
        - Hide all, reveal all
4. Card
    1. Contents
        - Front
        - Back
        - Explanation
        - Priority
        - Tags
5. Review
    - Sequential
    - Random
    - SRS

# Current schema

[[!uml src="""
!include templates/plantuml/er.iuml

' entities
Table(document, "Document\n(A document file)") {
    primary_key(id) INTEGER
    not_null(md5sum) VARCHAR[32]
    path TEXT
}

Table(ignored_doc, "IgnoredDoc\n(Ignore this\ndocument?)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(ignored) BOOLEAN
}

Table(phrase_cloze, "PhraseCloze\n(Some info of user)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(page) INTEGER
    not_null(text) TEXT
    not_null(offset_start) INTEGER
    not_null(offset_end) INTEGER
    not_null(suspended) BOOLEAN
    not_null(ignored) BOOLEAN
}

Table(processed_doc_pytextrank, "ProcessedDocPytextrank") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(processed) BOOLEAN
}

Table(pytextrank_cloze, "PytextrankCloze") {
    primary_key(phrase_cloze_id) INTEGER
    primary_key(pytextrank_data_id) INTEGER
}

Table(pytextrank_data, "PytextrankData") {
    primary_key(id) INTEGER
    not_null(processed_doc_pytextrank_id) INTEGER
    not_null(count) INTEGER
    not_null(pos) TEXT
    not_null(rank) REAL
    not_null(text) TEXT
}


' relationships

' one-to-one relationship

document "?" -- processed_doc_pytextrank: "document_id:\nA document may\nbe processed\nusing PyTextRank"
document "?" -- ignored_doc : "document_id:\nA document\nmay be ignored"

' one to many relationship
document --> phrase_cloze

phrase_cloze "?" --> pytextrank_cloze
pytextrank_data --> pytextrank_cloze

processed_doc_pytextrank --> pytextrank_data


' many to many relationship

"""]]


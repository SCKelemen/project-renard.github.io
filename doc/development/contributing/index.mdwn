[[!toc]]

## Reading material

### Standard modules

- [[Modern::Perl|https://p3rl.org/Modern::Perl]]
- [[Moo|https://p3rl.org/Moo]]
- [[Type::Tiny|https://p3rl.org/Type::Tiny]]

### Testing

Testing in Perl uses a format called the [[Test Anything Protocol|http://testanything.org/]] (or TAP).
This is a simple text-based format that outputs test results in a standard way
such that the results can be generated by different tools and even stored for later processing.

In order actually run these tests, you need to use the
[[prove|https://p3rl.org/prove]] test harness command.
Usually you want to run the test files under the `t/` directory.
By default, test files are just Perl scripts that have the extension `.t`.

You can do that by running `prove -lvr t/`.

  - The `t/` part tells `prove` where it to look for test files.
  - The `-l` option adds the Perl modules under the **`lib/`** directory to the Perl search path (`@INC`).
  - The `-v` option runs the tests in **verbose** mode to give extra information about each test.
  - The `-r` option **recursively** loads test files for every directory given.


In order to actually write the tests, look over the documentation for
[[Test::Most|https://p3rl.org/Test::Most]] and [[Test::More|https://p3rl.org/Test::More]].
These contain functions for checking for expected conditions in the test code.

### Release managment

In order to make releases, we use [[Dist::Zilla|https://p3rl.org/Dist::Zilla]].
This is a tool that can extended to do many maintenance tasks such as
listing all the dependencies of the code or testing for spelling errors in
documentation.

### Documentation

Perl documentation is written in a format called [[POD|https://p3rl.org/perlpod]].
It has a simple syntax that can be converted to many other formats such as HTML or manpages.
That syntax can be extended by using [[Pod::Weaver|https://p3rl.org/Pod::Weaver]]
which acts as a preprocessor that can add additional directives to POD.

### Devops

We use virtual machines to test the code under different environments. These
virtual machines are configured by using [[Vagrant|https://www.vagrantup.com/]].
See the [[devops|https://github.com/project-renard/devops]] repository for more
information.

### Learning GTK

GTK+ is the cross-platform GUI toolkit that we use. Instead of writing the GUI
code entirely by hand, much of layout is done interactively using the
[[Glade|https://glade.gnome.org/]] designer.

How to use Glade.

- <https://github.com/zmughal/learning-gtk>
- <https://github.com/MaxPerl/perl-Gtk3-Tutorial>
- <https://developer.gnome.org/gnome-devel-demos/stable/>
- <https://github.com/kevinphilp/Perl-gtk3-Tutorial>
- <https://github.com/dave-theunsub/gtk3-perl-demos>
- <http://gtk2-perl.sourceforge.net/doc/>
- <https://github.com/Programmica/perl-gtk3-examples>

In order to see the documentation for Glib-based libraries (such as Gtk) in a Perl-friendly way,
the [[Glib::Object::Introspection|https://p3rl.org/Glib::Object::Introspection]]
package comes with called `perli11ndoc` that shows all the available classes that can be used
for that library using Perl syntax.

[[!img gfx/perli11ndoc.png caption="The perli11ndoc tool showing documentation from Gtk3's AccelGroup class."]]

### Creating Perl bindings

- <https://github.com/Perl-XS/notes/blob/master/Resources.md>

[[!meta title="Interaction"]]

[[!toc levels=3]]

# View options

[[!uml src="""

package View::HighLevel {
    ViewOptions *-- "1" GridOptions: contains
    ViewOptions *-- "1" ZoomOptions: contains
    ViewOptions *-- "1" OffsetOptions: contains
    ZoomOptions *-- "1" ZoomType: contains
}

class ViewOptions {
    Document d;
    GridOptions g;
    ZoomOptions z;
    OffsetOptions o;
}

class ZoomOptions {
    ZoomType z;
    -Float _zoom_percentage;
}

enum ZoomType {
    PERCENTAGE;
    FIT_WIDTH;
    FIT_HEIGHT;
}

class GridOptions {
    Maybe[PositiveInt] rows;
    Maybe[PositiveInt] columns;
}
"""]]

# Rendering

[[!uml src="""
control "GUI" as GUIComp << Widget >>
control "Page Drawing\nComponent" as PDComp << Widget >>

entity "View" as VM << Model >>
entity "Document" as DM << Model >>
entity "Transformation" as TM << Model >>

== Initialisation ==

GUIComp -> PDComp : init

create VM
PDComp -> VM : set-view

create DM
VM -> DM: open-document
create TM
VM -> TM: set-transformation

== Calculate view ==

GUIComp -> PDComp : configure-event

PDComp -> VM : view-changed
|||
VM -> DM : get-bounding-boxes
VM <- DM : bounding-box-results
|||
VM -> TM : apply-transformation
TM -> VM : transformation-results
|||
VM -> PDComp : set-size-request

== Draw page ==

GUIComp -> PDComp : queue-redraw

PDComp -> VM : get-view-actors

VM -> DM : get-pages

"""]]

# Views

## Definitions

**Page range**: a page range indicates the which pages an operation is applied upon.

**Transformation**: (scale, rotate, shear, crop).

**Continuous**: a continuous view puts all the pages.

**Columns**: number of items to show in each row.

**Alignment**: left, center, right; horizontal, vertical.

## Grid

View is made up of a grid. A grid has rows and columns.

[[!format txt """
 +---+---+---+
 |   |   |   |  row 1
 +---+---+---+
 |   |   |   |  row 2
 +---+---+---+
   c   c   c 
   o   o   o 
   l   l   l 
             
   1   2   3 
"""]]


### Page order

These rows and columns can be filled in certain ways:

- left-to-right-then-left-to-right

[[!format txt """
 +---+---+---+
 | 1 | 2 | 3 |
 +---+---+---+
 | 4 | 5 | 6 |
 +---+---+---+
"""]]

- right-to-left-then-right-to-left

[[!format txt """
 +---+---+---+
 | 3 | 2 | 1 |
 +---+---+---+
 | 6 | 5 | 4 |
 +---+---+---+
"""]]

### Layout

The grid can have a defined number of columns and defined number of rows that
will be used for layout. This can be in the form of

- Defined rows, Defined columns

Example: Rows: 2, Columns: 3, Total Pages: 11

[[!format txt """
 View 1                     View 2
 +---+---+---+              +---+---+---+
 | 1 | 2 | 3 |              | 7 | 8 | 9 |
 +---+---+---+              +---+---+---+
 | 4 | 5 | 6 |              |10 |11 | - |
 +---+---+---+              +---+---+---+
"""]]

- Undefined rows, Defined columns

Example: Rows: undefined, Columns: 3, Total Pages: 11

[[!format txt """
View
 +---+---+---+
 | 1 | 2 | 3 |
 +---+---+---+
 | 4 | 5 | 6 |
 +---+---+---+
 | 7 | 8 | 9 |
 +---+---+---+
 |10 |11 | - |
 +---+---+---+
"""]]

- Defined rows, Undefined columns

Example: Rows: 2, Columns: undefined, Total Pages: 11

[[!format txt """
View
 +---+---+---+---+---+---+
 | 1 | 2 | 3 | 4 | 5 | 6 |
 +---+---+---+---+---+---+
 | 7 | 8 | 9 |10 |11 | - |
 +---+---+---+---+---+---+
"""]]


This provides a generalisable approach to rectangular layout that can
incorporate the idea of continuous pages and how many pages should be fit into
the current view.

### Alignment

The grid approach offers two places where alignment can occur:

  1. Within each cell of the grid: this is only important if the page size changes within the view.
  2. With respect to the parent widget: this requires computing the size of the entire grid.

### Algorithm

[[!format txt """
PageRange_start ← start of pages to render
PageRange_end   ← end of pages to render

G_r ← number of rows in grid
G_d ← number of rows in grid

if defined(G_r) and defined(G_d) then
    # We need to split into views
    NumOfPagesPerView ← G_r × G_d
    NumberOfViews ← ceil( ( PageRange_end - PageRange_start + 1 ) / NumOfPagesPerView )
    for k ∈ [0, NumberOfViews)
        View[ k ] ← Grid( G,
                            ( k * NumOfPagesPerView ) + PageRange_start,
                            min( ( (k + 1) × NumOfPagesPerView ) + PageRange_start - 1 , PageRange_end )
                     )
    end
else
    View ← Grid(G, PageRange_start, PageRange_end )
end

define Grid( Grid, P_start, P_end )
    Intercell_width ← length between columns
    Intercell_height ←  length between rows
    GridWidth ← …
end
"""]]


### Page sequence

Finite / infinite

### Page order

### Transformations

#### Global transformation

#### Page transformation




[[!uml src="""
Document *-- "many" Page: contains

View *-- "1" Layout

class Layout {
    PositiveInt number_of_items;

    GlobalBoundingBox nth_bounding_box( PositiveInt item_num );
}
class Grid extends Layout {
    Maybe[PositiveInt] rows;
    Maybe[PositiveInt] columns;
}

class Document {
    Page get_page();
}

class Page {
    Transformation @transformations;

}

class View {
    Transformation @transformations;
    Layout layout;
    PageRenderer renderer;
}

class PageRenderer {
    CairoSurface render_cairo_surface( Page p, Transformation t );
}
"""]]
